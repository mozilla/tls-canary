# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.

import glob
import io
import json
import os
import pytest
import unittest.mock as mock

from tlscanary import main


@pytest.mark.slow
def test_tlscanary_regression_and_log(tmpdir, nightly_archive):
    """TLS Canary can make regression runs"""

    work_dir = tmpdir.join("workdir")

    # Run a quick regression scan, simulating error conditions by -p1
    argv = [
        "--workdir", str(work_dir),
        "regression",
        "-t", nightly_archive,
        "-b", nightly_archive,
        "-l", "9",
        "-p1", "security.tls.version.min;4"
    ]
    ret = main.main(argv)
    assert ret == 0, "regression run finished without error"

    # Check log
    argv = [
        "--workdir", str(work_dir),
        "log",
        "-a", "json",
        "-i", "1"
    ]
    with mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
        ret = main.main(argv)
        stdout = mock_stdout.getvalue()
    assert ret == 0, "regression log dump finished without error"
    assert len(stdout) > 0, "regression log dump is not empty"
    log = json.loads(stdout)
    assert type(log) is list, "regression JSON log is list"
    assert len(log) == 1, "there is one log in the dump"
    assert "meta" in log[0] and "data" in log[0], "log has meta and data"
    assert len(log[0]["data"]) > 3, "log has correct number of lines"

    # Write HTML report
    # TODO: Regression log was generated by the -p1 hack, thus does not contain certificate data.
    report_dir = tmpdir.join("report")
    argv = [
        "--workdir", str(work_dir),
        "log",
        "-a", "webreport",
        "-i", "1",
        "-o", str(report_dir)
    ]
    ret = main.main(argv)
    assert ret == 0, "regression HTML report finished without error"
    assert os.path.isdir(report_dir), "HTML report dir was created"
    assert os.path.isfile(report_dir.join("index.htm")), "HTML report index was written"
    runs_file = report_dir.join("runs", "runs.json")
    assert os.path.isfile(runs_file), "HTML `runs.json` file was written"
    with open(runs_file) as f:
        runs_lines = json.load(f)
    assert len(runs_lines) == 1, "one HTML run was written"
    run_dir = report_dir.join("runs", runs_lines[0]["data"][0]["run"])
    assert os.path.isdir(run_dir), "HTML run dir was created"
    zip_glob = glob.glob(str(run_dir.join("*.zip")))
    assert len(zip_glob) == 3, "three profile archives were written to HTML run dir"


@pytest.mark.slow
def test_tlscanary_srcupdate_and_scan_and_log(tmpdir, nightly_archive):
    """TLS Canary can update source DBs"""

    work_dir = tmpdir.join("workdir")

    # Compile a fresh `pytest` host db
    argv = [
        "--workdir", str(work_dir),
        "srcupdate",
        "-b", nightly_archive,
        "-l", "5",
        "-s", "pytest"
    ]
    ret = main.main(argv)
    assert ret == 0, "srcupdate run finished without error"

    # Run a scan against `pytest` host db
    argv = [
        "--workdir", str(work_dir),
        "scan",
        "-t", nightly_archive,
        "-s", "pytest",
    ]
    ret = main.main(argv)
    assert ret == 0, "scan run finished without error"

    # Check logs
    argv = [
        "--workdir", str(work_dir),
        "log",
        "-a", "json",
        "-i", "1"
    ]
    with mock.patch('sys.stdout', new=io.StringIO()) as mock_stdout:
        ret = main.main(argv)
        stdout = mock_stdout.getvalue()
    assert ret == 0, "scan log dump finished without error"
    log = json.loads(stdout)
    assert type(log) is list, "scan JSON log is list"
    assert len(log) == 1, "there is one log in the dump"
    assert "meta" in log[0] and "data" in log[0], "log has meta and data"
    assert len(log[0]["data"]) == 5, "log has correct number of lines"
